repo_full_name,pr_id,number,title,body,user_login,user_id,state,draft,created_at,updated_at,closed_at,merged_at,merge_commit_sha,mergeable_state,additions,deletions,changed_files,commits_count,review_comments_count,comments_count,requested_reviewers,requested_teams,labels
dagster-io/dagster,192152493,8,Running edits with no tests,Merging abes stuff. I need to figure out a better merge process here as this polluted the commit history. I don't really care for now.,schrockn,28738937,closed,False,2018-06-01T22:01:18+00:00,2018-06-07T18:08:41+00:00,2018-06-01T22:01:29+00:00,2018-06-01T22:01:29+00:00,791cf43a1755dbd8273f3be8a48111cd2b21943c,unknown,87,9,7,32,0,0,,,
dagster-io/dagster,192157423,9,Branch for rearch pr,"
First large dagster rearchitecture  â€¦
1) Introduce the notion of Source definitions in addition to inputs.
A SourceDefinition represents a method of instantiating an input
into a transform that is not just flowing it from an upstream
dependency e.g. loading a file or just laoding a bag of key-value pairs

2) Introduce the notion of materializations. These are the mirror
images of sources, but for the output. A given output definition knows
zero or more ways to materialize itself.

3) Strongly-typed interfaces to configure the execution and
materializations of pipelines.",schrockn,28738937,closed,False,2018-06-01T22:34:57+00:00,2018-06-07T18:08:41+00:00,2018-06-01T22:35:07+00:00,2018-06-01T22:35:07+00:00,bb72575127778bbec8506c0289ef704cb365c6d8,unknown,2057,1006,38,2,0,0,,,
dagster-io/dagster,192435960,11,Update standalone cli,"* Refactor the code a little to clean up and understand it better
* Add execute command to standalone that is a combination of execute and
materialize
* Add .style.yapf (generated by yapf)
* Add some basics to README",freiksenet,172936,closed,False,2018-06-04T14:57:42+00:00,2018-06-07T18:08:41+00:00,2018-06-04T16:57:19+00:00,2018-06-04T16:57:19+00:00,12c405781c10b597366643543313b3a765ee2fb5,dirty,406,62,4,2,2,2,,,
dagster-io/dagster,192677842,20,Add support for environment file to execute command,,freiksenet,172936,closed,False,2018-06-05T11:40:48+00:00,2018-06-07T18:08:41+00:00,2018-06-06T07:30:07+00:00,2018-06-06T07:30:07+00:00,9774be2ff43e25e6a7deda47442040f71be2347d,dirty,134,82,4,1,6,0,,,
dagster-io/dagster,192724812,23,Nick cli push,,schrockn,28738937,closed,False,2018-06-05T14:21:19+00:00,2018-06-07T18:08:41+00:00,2018-06-05T14:21:28+00:00,2018-06-05T14:21:28+00:00,4d838b460f14abe5228ffa6df1c1717783f6a592,dirty,71,49,6,8,0,0,,,
dagster-io/dagster,193000309,25,Cli effort 3,,freiksenet,172936,closed,False,2018-06-06T12:42:13+00:00,2018-06-07T18:08:41+00:00,2018-06-06T18:40:50+00:00,2018-06-06T18:40:50+00:00,4c7cc0bd32eb178679b365f14ebf41f8218700a7,dirty,338,597,11,3,2,0,,,
dagster-io/dagster,193351928,27,Modify pandas API to use sources more prominently,,freiksenet,172936,closed,False,2018-06-07T14:58:37+00:00,2018-07-08T17:34:03+00:00,2018-06-07T18:14:40+00:00,2018-06-07T18:14:40+00:00,9679b4bdc208aeb1649e035bd9e18c82b034b970,dirty,80,95,5,1,4,0,,,
dagster-io/dagster,193634732,31,Fix tests,,freiksenet,172936,closed,False,2018-06-08T14:40:01+00:00,2018-06-08T14:57:38+00:00,2018-06-08T14:57:36+00:00,2018-06-08T14:57:36+00:00,d7b076f56636a531dfe5627e44915d16665ff5b3,dirty,132,52,13,3,2,0,,,
dagster-io/dagster,193838606,34, Move config class creation to a function,"With the click api for make_pass_decorator you have a
invoke it on a created class. My general preference
is to avoid programmatic manipulation of classes in
global scope once they have been created. I'm not married
to this solution but I want class creation and any required
maninpulation grouped together somehow.",schrockn,28738937,closed,False,2018-06-10T18:02:53+00:00,2018-06-11T07:56:03+00:00,2018-06-11T07:56:00+00:00,2018-06-11T07:56:00+00:00,f2c2d377ad420ea7eba50250a348d22beff44735,dirty,64,80,3,5,0,0,freiksenet,,
dagster-io/dagster,194037408,39,Some relatively minor changes to make json logging work,These changes are needed for the superconductive folks,schrockn,28738937,closed,False,2018-06-11T16:34:57+00:00,2018-06-11T16:41:59+00:00,2018-06-11T16:41:56+00:00,2018-06-11T16:41:56+00:00,dcf9c0756c1dd09b0f2a23752cfa61673a81e43f,dirty,25,25,2,1,0,0,,,
dagster-io/dagster,194039524,40,Develop,,schrockn,28738937,closed,False,2018-06-11T16:43:14+00:00,2018-07-05T17:32:31+00:00,2018-06-11T16:45:16+00:00,2018-06-11T16:45:16+00:00,50d88fd9fb6d0718af96a56d1048cb139878c32f,unknown,1723,1015,49,45,0,0,,,
dagster-io/dagster,194296735,43,Pre-release usability fixes,"* Add dagster cli local directory to path so that modules are loaded
* Allow specifying different names for dependency inputs than the solid name
* Validate transform parameters to match input defs",freiksenet,172936,closed,False,2018-06-12T14:20:41+00:00,2018-06-13T10:39:00+00:00,2018-06-13T10:38:57+00:00,2018-06-13T10:38:57+00:00,6d9ac90276af96cf9fe6e008ff569a84b00a0eae,unknown,482,318,12,5,8,1,,,
dagster-io/dagster,197100058,44,Output validation,,freiksenet,172936,closed,False,2018-06-25T12:42:35+00:00,2018-06-26T12:41:35+00:00,2018-06-26T12:41:32+00:00,2018-06-26T12:41:32+00:00,a61c99354a9df434029afd78af0febd1568c3daf,unknown,1096,605,30,7,6,1,,,
dagster-io/dagster,197998916,45,Add user defined context,,freiksenet,172936,closed,False,2018-06-28T11:27:17+00:00,2018-08-17T20:43:19+00:00,2018-08-02T14:54:10+00:00,,bbb3ed672d619650e909c9b0e5a409f4dc5d31b5,dirty,104,44,17,1,0,3,schrockn,,
dagster-io/dagster,198351315,46,Expand docs,,freiksenet,172936,closed,False,2018-06-29T15:28:34+00:00,2018-07-05T17:32:42+00:00,2018-06-29T18:18:03+00:00,2018-06-29T18:18:03+00:00,0e6830c2850e2f3d9f5f1b56849b9320e6db80de,unknown,268,65,1,2,0,0,,,
dagster-io/dagster,199564233,47,Nick glorious return and cleanup,This fixes a graphviz and bug and does a bunch of lint cleanup,schrockn,28738937,closed,False,2018-07-05T19:21:43+00:00,2018-07-05T19:21:56+00:00,2018-07-05T19:21:50+00:00,2018-07-05T19:21:50+00:00,df44b0885275feb782d90017f0b4b46d7aad5de3,unknown,295,129,11,6,0,0,,,
dagster-io/dagster,201015835,48,New config API,,schrockn,28738937,closed,False,2018-07-12T14:14:08+00:00,2018-07-25T20:34:03+00:00,2018-07-12T14:14:20+00:00,2018-07-12T14:14:20+00:00,cb42fb9861e7191421eef83e50fd36103a02f6df,unknown,163,293,20,1,0,0,,,
dagster-io/dagster,202576543,49,Move .circleci to root directory,,schrockn,28738937,closed,False,2018-07-19T14:22:06+00:00,2018-07-19T14:23:54+00:00,2018-07-19T14:23:50+00:00,2018-07-19T14:23:50+00:00,1dc1e25f8352763ce064b9ee977df464414a29e8,unknown,3,2,1,1,0,0,,,
dagster-io/dagster,202655009,50,Add pure in memory pipeline runner,,schrockn,28738937,closed,False,2018-07-19T19:05:37+00:00,2018-07-19T19:06:03+00:00,2018-07-19T19:06:00+00:00,2018-07-19T19:06:00+00:00,bd3e2295486bbf2f25442378176910d876203bad,unknown,153,51,2,1,0,0,,,
dagster-io/dagster,202698437,51,Dagster ge initial checkin,,schrockn,28738937,closed,False,2018-07-19T22:14:24+00:00,2018-07-21T22:16:25+00:00,2018-07-21T22:16:19+00:00,2018-07-21T22:16:19+00:00,06922370b5c39cea8b85897f0c82d1408f8b2fc6,unknown,430,3,10,1,0,0,,,
dagster-io/dagster,203028888,52,Add default values to optional scalar checks,,schrockn,28738937,closed,False,2018-07-21T22:01:34+00:00,2018-07-21T22:01:43+00:00,2018-07-21T22:01:41+00:00,2018-07-21T22:01:41+00:00,6b9049efbb0d7ed5f6e4a9ea2a51ed096948d79c,unknown,12,10,2,1,0,0,,,
dagster-io/dagster,203343958,53,Change inputs to be scoped by solid- rather than pipeline-scoped,"Previous to this PR input names were globally scope to a pipeline.

This means that if two solids specified the same input name you
could specify the input once in the config.Environment object
and then it would be filled in. However this also broke
modularity as collision could occur between solids that didn't
know anything about eachother.",schrockn,28738937,closed,False,2018-07-23T21:07:20+00:00,2018-07-25T20:34:04+00:00,2018-07-24T22:39:52+00:00,2018-07-24T22:39:52+00:00,1c75e6f225ff35ce1de1f70df7a5ccfb9a1ff5ab,unknown,342,150,20,2,0,0,,,
dagster-io/dagster,203877453,54,4 tests left. Have to flow through materialization,,schrockn,28738937,closed,False,2018-07-25T15:31:45+00:00,2018-07-26T23:24:51+00:00,2018-07-26T23:24:51+00:00,,45b130cf08b20003e23b5a303fcfe8fb7f0c010f,unknown,523,263,23,10,0,0,,,
dagster-io/dagster,204301570,57,Add PipelineContextDefinition,"This adds the ability for pipeline to define all the contexts that it
supports. One can pass arguments to this context via the config. This
will pipelines to define contexts such as ""debug"" and ""prod"" as well as
others that are made available to all nodes in the pipeline. This is
excellent for concepts like handles to s3 and database connections.",schrockn,28738937,closed,False,2018-07-27T00:33:50+00:00,2018-07-27T00:36:19+00:00,2018-07-27T00:35:31+00:00,2018-07-27T00:35:31+00:00,8679faf0a002751e751af024de7f33fa2ba46e80,unknown,518,273,23,1,0,0,,,
dagster-io/dagster,204487734,58,Clean up public API,"This diff does a bunch of renaming (e.g. DagsterPipeline -->
PipelineDefinition) and ends up standardizing all definitions as
XXXDefinition where XXX is the concept in question.

This also cleans up dagster/__init__.py to include only the public API
and eliminates some circular dep issues.

Consumers of dagster should just

import dagster

And then do code like:

dagster.PipelineDefinition(
  # ...
)

and so on and so forth",schrockn,28738937,closed,False,2018-07-27T17:02:18+00:00,2018-07-27T17:02:45+00:00,2018-07-27T17:02:42+00:00,2018-07-27T17:02:42+00:00,ecb0e4d05bcc0b74f8369c511c992bf74a53703c,unknown,358,323,37,1,0,0,,,
dagster-io/dagster,204538338,59,Add ArgumentDefintion,"Instead of a dictionary from string to bare type for defining the set of
arguments, we move to ArgumentDefinition. This will allow things like
attaching descriptions to arguments, optionality, default values, and
other concepts",schrockn,28738937,closed,False,2018-07-27T20:57:34+00:00,2018-07-27T20:58:55+00:00,2018-07-27T20:58:52+00:00,2018-07-27T20:58:52+00:00,db329da5f1bc08a031a94eeeb3cc32f9ff17fae1,unknown,181,154,20,1,0,0,,,
dagster-io/dagster,204600025,60,Adding optional and default values for arguments,"This adds an optional flag and default values to ArgumentDefinition.
This will allow contexts (e.g the default context where one can
parameterize logging) to have optional arguments with default values.
Same for solids.",schrockn,28738937,closed,False,2018-07-28T16:21:56+00:00,2018-07-28T16:23:18+00:00,2018-07-28T16:23:03+00:00,2018-07-28T16:23:03+00:00,7dda62f9e2be534fb4917e3b148c2bd6479fa6ea,unknown,376,85,7,1,0,0,,,
dagster-io/dagster,204617250,61,Consolidate materialization and execution,"This eliminates the two species of execution, execution and
materialization. Instead materializations are part of the environment,
and everything just goes through execution.

This simplifies a ton of stuff and I'm pumped up about it.",schrockn,28738937,closed,False,2018-07-29T00:24:35+00:00,2018-07-29T00:31:58+00:00,2018-07-29T00:31:39+00:00,2018-07-29T00:31:39+00:00,4fccbe599dabf859e4732f9a0d1b044fb1a2b6f0,unknown,206,290,20,1,0,0,,,
dagster-io/dagster,204620089,62,Context can now be driven from command line,"Also added testing for Environment construction and command line smoke
tests",schrockn,28738937,closed,False,2018-07-29T02:00:17+00:00,2018-07-29T02:00:44+00:00,2018-07-29T02:00:42+00:00,2018-07-29T02:00:42+00:00,0753f733b67e073107781f13d0360e6e86029ef9,unknown,212,60,9,1,0,0,,,
dagster-io/dagster,204670220,63,Context creation function can now yield,"Sometimes contexts need to clean up after themselves after a
pipeline execution run. In order to support this a context_fn
in a PipelineContextDefinition can either return a context object
directly or yield a context object. The calling code dynamically tests
which case it is.",schrockn,28738937,closed,False,2018-07-30T00:29:16+00:00,2018-07-30T00:30:43+00:00,2018-07-30T00:30:38+00:00,2018-07-30T00:30:38+00:00,b5c3cb7abbc76251a37dfda79cdc863b29c6108f,unknown,132,61,10,1,0,0,,,
dagster-io/dagster,204889815,64,Improve printing,"This prints out context definitions and does some reformatting.

Also added IndentingPrinter which makes the code better",schrockn,28738937,closed,False,2018-07-30T18:25:43+00:00,2018-07-30T18:35:47+00:00,2018-07-30T18:35:44+00:00,2018-07-30T18:35:44+00:00,e386c405f73722996eb483c81dd073fbe830384f,unknown,222,50,6,1,0,0,,,
dagster-io/dagster,204995671,65,Introduce resource pattern to the dagster sql context,"This introduces the mixin-esque strategy to manage contexts. Instead
of subclassing per resource (e.g. A sqlalchemy-specific context), this will allow
a context to be utilize a number of different resources. Libraries will
assume that a resource of a certain name and type exist. Right now
the sqlalchemy kernel just does runtime type checks to enforce this.",schrockn,28738937,closed,False,2018-07-31T04:54:22+00:00,2018-07-31T04:54:36+00:00,2018-07-31T04:54:32+00:00,2018-07-31T04:54:32+00:00,651fdf02c4fa0db64b0547dd1fdf236d4f8dc07c,unknown,59,34,8,1,0,0,,,
dagster-io/dagster,205468142,66,Add descriptons to all core dagster definitions,"All of these things should have optional descriptions. This is in
preparation for the new UI.",schrockn,28738937,closed,False,2018-08-01T15:39:32+00:00,2018-08-01T15:42:02+00:00,2018-08-01T15:40:20+00:00,2018-08-01T15:40:20+00:00,278d3f8a232becfb310b8f25ca69100b4c03e3cf,unknown,23,12,1,1,0,0,,,
dagster-io/dagster,205609426,67,Productionize expectations execution,"This PR ""productionizes"" expectations execution. Namely it makes it
configurable. (Currently you can just totally turn this off or no.
Undoubtedly this will have to become more granular and sophisticated)

Also this instigated a substantial refactor of execution.py, which was
quite pleasing.",schrockn,28738937,closed,False,2018-08-02T03:34:29+00:00,2018-08-02T03:42:07+00:00,2018-08-02T03:42:04+00:00,2018-08-02T03:42:04+00:00,5928f698b3014a49cf209c2ba6a50b24d9eb069a,unknown,319,167,14,1,0,0,,,
dagster-io/dagster,205756960,68,Move from_solids and through_solids to config.Environment,"Instead of parameterizing separately, from_solids and through_solids is
part of the config system. The contents of a config are totally tied to
the through and from arguments anyways so they should be a part of the
top level object.",schrockn,28738937,closed,False,2018-08-02T14:35:54+00:00,2018-08-02T14:40:30+00:00,2018-08-02T14:40:25+00:00,2018-08-02T14:40:25+00:00,9a1ab149e22d6dfec6356ad8a185b8d6e7ac7dc7,unknown,153,123,9,1,0,0,,,
dagster-io/dagster,206416615,70,Initial commit of the user-facing Dagster type system,"This PR adds a user-facing type system to dagster. Instead of
""typing"" solids by adding typechecks to input and output callback, one
can instead specify a type. This type itself knows how to do a
typecheck.

InputDefinition and OutputDefinitions now accept an optional type
argument (it defaults to the new Any type). This type
knows how to check to see if the runtime python type is compatible. It
also provides ""default"" sources and materializations.

Future enhancements could include a set of expectations along with
python type checks as well. This way expectations and the type system
would be unified.

There's a fair bit of noise in this PR at I used the addition
of the type system as an opportunity to clean up a bunch of stuff
to demonstrate value. The ""pandas kernel"" is much more simple, as
an example.",schrockn,28738937,closed,False,2018-08-06T14:27:22+00:00,2018-08-16T04:00:53+00:00,2018-08-06T16:44:36+00:00,2018-08-06T16:44:36+00:00,4fcbc5dd16083ba0350703dec93a53f7ce363255,unknown,544,547,34,1,0,0,freiksenet,,
dagster-io/dagster,206811819,73,Add mocking to SqlAlchemy kernel,,schrockn,28738937,closed,False,2018-08-07T20:06:32+00:00,2018-08-16T04:00:52+00:00,2018-08-07T20:13:18+00:00,2018-08-07T20:13:18+00:00,2eff6c3217454ea687935ece9e94b585c4c78613,unknown,36,4,3,1,0,0,,,
dagster-io/dagster,207307787,74,Add descriptions to decorators,,schrockn,28738937,closed,False,2018-08-09T12:59:26+00:00,2018-08-09T13:09:59+00:00,2018-08-09T13:09:56+00:00,2018-08-09T13:09:56+00:00,8063c9c526ef59a1aa738d2238835cf0d1ebc7b3,unknown,70,21,2,1,0,1,,,
dagster-io/dagster,207586942,75,Dasgter ui,,schrockn,28738937,closed,False,2018-08-10T11:41:11+00:00,2018-08-10T11:41:53+00:00,2018-08-10T11:41:41+00:00,2018-08-10T11:41:41+00:00,73934834d9a530a3e2097d90ead639073006b452,unknown,12999,0,63,15,0,0,,,
dagster-io/dagster,207612557,76,Rename dagster-ui to dagit,,schrockn,28738937,closed,False,2018-08-10T13:29:50+00:00,2018-08-10T13:30:01+00:00,2018-08-10T13:29:56+00:00,2018-08-10T13:29:56+00:00,9701d7c2f228a198ff2abcbeff09e6f536c0cdbc,unknown,29,27,63,1,0,0,,,
dagster-io/dagster,208684418,77,Execution Rewrite: The Compute Node,"This is a substantial rewrite of the execution pipeline and will
open up a whole new range of explorations and more.

The core architectural change here is that there is an entire
new system of representation for the *execution* graph of computations
(compute nodes) rather than just the PipelineDefintion.

The compute node graph is constructed from the PipelineDefinition
and input config. A number of things happen during this construction:

1. All sources, materializations, expectations, and transforms are
modelled within the same abstraction: the compute node. All argument
checking and validiations are done during compute node graph
construction time, before any execution proceeds. This is similar to
validation as a separate step in the graphql universe.

2. Compute nodes can have multiple inputs, multiple outputs, and a
configuration dictionary (arg dict). This allows for maximum flexibility
and for it to be generic enough to handled the different concepts listed
in bullet 1. For example a source is just a compute node with *no*
inputs, a single output, and an arg dict. A materialization is a compute
node with an input (coming from the output of of a transform), no
outputs, and an arg dict. A transform can have multiple inputs and
(now) multiple outputs, but it current doesn't support an arbitrary arg
dict. Expectations are also a compute node.

3. This will allow for dynamically configured dependencies as opposed
to the more static construction. We are already using the dynamic
compute node graph to change based on policy. If, for example, you
do turn off expectations those compute nodes are never even
constructed. If they are they dynamically placed before the appopriate
input or after the appropriate output and set up to execute in parallel.

4. Sources and materializationsn as separate concepts are going to
largely dissappears. I am still toying with how to expose them to the
higher level config and pipeline definition API, but if they exist they
will be largely symbolic.

5. More sophisticated expectations execution will happen via this
mechanism. For example I fully anticipate that expectation compute nodes
will have two outputs, one for the value being tested and passed
through, but the other for the expectation result. This will allow the
framework (or the user in some capacity) to add compute nodes that act
on the expectation.

6. Composability: This is also an interesting angle for putting
composability into this execution engine. It should be totally possible
to build ""composite"" compute nodes that consist of a DAG of compute
nodes. When taken as a whole they will have a set of inputs, a set of
outputs, and a set of configuration.

7. Visualizations and debugging: This will be a powerful tool of
visualization and debugging. One will be able to set config, apply it to
a pipeline, and previz *exactly* what is going to execute in a very
granular way. Execution should be able to be reported through this
mechanism as well.

Next up I'm going to leverage this architectural change to change the
dependency API for pipeline definitions.",schrockn,28738937,closed,False,2018-08-15T21:18:11+00:00,2018-08-17T20:40:44+00:00,2018-08-17T20:40:39+00:00,2018-08-17T20:40:39+00:00,d19411e95d7e7bf93c73f8307e0dbe3de20761e0,dirty,1630,1428,25,1,0,0,,,
dagster-io/dagster,208941982,78,* added solids command to pipeline CLI,"Rough draft of an abbreviated solids list for a single pipeline - makes for a fast debugging tool.

`dagster pipeline solids <<pipeline_name>>`",Aylr,928247,closed,False,2018-08-16T18:14:32+00:00,2018-08-16T18:15:11+00:00,2018-08-16T18:14:55+00:00,,4c98c5bf30a885efb68d007d8a1f10ca1ffd7a3d,unknown,26,1,1,1,0,1,schrockn,,
dagster-io/dagster,208943437,79,added solids command to pipeline CLI,`dagster pipeline solids <<pipeline_name>>` gives a user a fast list of solids for a fast dev debugging cycle,Aylr,928247,closed,False,2018-08-16T18:20:30+00:00,2018-08-24T13:14:35+00:00,2018-08-24T13:14:27+00:00,2018-08-24T13:14:27+00:00,75c316a038c9086875a675939b85acdeb0c56a10,unknown,25,4,2,1,0,6,,,
dagster-io/dagster,209334699,80,Move dependencies out of SolidDefinition,"This moves dependencies from a solid-level concern to a pipeline-wide
concern. This will make solid reuse much more straightforward, as well
as other things.",schrockn,28738937,closed,False,2018-08-18T23:18:58+00:00,2018-08-18T23:20:28+00:00,2018-08-18T23:20:26+00:00,2018-08-18T23:20:26+00:00,95b9cff2b503986a7b402a368390b88edae57c69,dirty,630,454,22,1,0,0,,,
dagster-io/dagster,209335902,81,Dagster supports multiple outputs now,"Now the contract for the transform is that you yield a sequence of
Result objects. Added single_output_transform helper for SolidDefinition
to handle all legacy callers.",schrockn,28738937,closed,False,2018-08-19T00:07:26+00:00,2018-08-20T13:42:57+00:00,2018-08-19T00:10:05+00:00,2018-08-19T00:10:05+00:00,f11bbc45c75d7eb1d0421210a8e491995ac212da,dirty,219,230,25,1,0,0,,,
dagster-io/dagster,209336635,82,Eliminate Mapper and replace with strongly typed dict subclasses,,schrockn,28738937,closed,False,2018-08-19T00:36:25+00:00,2018-08-19T00:37:21+00:00,2018-08-19T00:37:17+00:00,2018-08-19T00:37:17+00:00,b722c6fc7af7683d9936c84bbcff573949cfbe31,dirty,33,42,1,1,0,0,,,
dagster-io/dagster,209355686,83,Add config_dict to SolidDefinition,With this in place Sources and Materializations can go,schrockn,28738937,closed,False,2018-08-19T11:34:32+00:00,2018-08-19T11:35:10+00:00,2018-08-19T11:35:02+00:00,2018-08-19T11:35:02+00:00,607c0ecb6fc7b7fc991d69ee2a77f00a72adfc56,dirty,201,146,9,1,0,0,,,
dagster-io/dagster,209366119,84,Eliminate SourceDefinition,"Now that solids are more generic, they can totally replace
SourceDefinitions. This diff does that.",schrockn,28738937,closed,False,2018-08-19T15:43:46+00:00,2018-08-19T15:44:22+00:00,2018-08-19T15:44:18+00:00,2018-08-19T15:44:18+00:00,9f4960e7ca85b4151bcf8f5c8819855b41a3e1f8,dirty,926,2342,35,1,0,0,,,
dagster-io/dagster,209372167,85,Materializations are gone,This eliminates materializations as a formalized concept.,schrockn,28738937,closed,False,2018-08-19T18:09:36+00:00,2018-08-19T18:19:17+00:00,2018-08-19T18:19:13+00:00,2018-08-19T18:19:13+00:00,6cdfeb173e2c66f6d3210099ca3c5e7888a0136a,dirty,310,820,20,1,0,0,,,
dagster-io/dagster,209505825,86,Make dagit production ready,"* Only one command - ""dagit"" now
* Make sure files are included in python
* Serve static files
* Serve index.html in all other cases (for push state support)

Well that was harder than expected, lol.",freiksenet,172936,closed,False,2018-08-20T12:32:04+00:00,2018-08-20T14:17:58+00:00,2018-08-20T14:17:51+00:00,2018-08-20T14:17:51+00:00,d03b3432b790908ecb6e05816e8ba7ef9bf839d8,unknown,31,21,54,1,0,0,,,
dagster-io/dagster,209682517,88,Define selection execution,"This begins to layout an approach for partial pipeline execution
in a world without sources.

The primary mechanism is through ""create_pipeline_slice"" which
allows the use to specify from_solids and through_solids to define
the subgraph, and then also pass in ""injected_solids"" where you specific
a dictionary just like dependencies, but instead of
DependencyDefinitions you just supply solids directly. If we can
build solids directly from a string (through some sort of registry), all
elements of this function call can be expressed from a config file.",schrockn,28738937,closed,False,2018-08-21T01:06:21+00:00,2018-08-21T11:35:03+00:00,2018-08-21T11:35:00+00:00,2018-08-21T11:35:00+00:00,7d07830391736a6b73676e836aa5cc38114188e8,dirty,307,318,10,1,0,2,,,
dagster-io/dagster,210007157,90,Some usability improvements,"Error messages, mostly as well as some improved logging",schrockn,28738937,closed,False,2018-08-22T02:50:44+00:00,2018-08-22T02:51:00+00:00,2018-08-22T02:50:56+00:00,2018-08-22T02:50:56+00:00,a34d4e9e1e398cc0923afd2c22c8e13a5604fcb2,dirty,240,111,11,1,0,0,,,
dagster-io/dagster,210111083,91,0.2.0 dagit,,freiksenet,172936,closed,False,2018-08-22T12:04:11+00:00,2018-08-22T12:04:22+00:00,2018-08-22T12:04:19+00:00,2018-08-22T12:04:19+00:00,abeae8143aa9c4cb71304fd42e404cf2f76bc730,dirty,429,479,21,2,0,0,,,
dagster-io/dagster,210127482,92,* improved missing dependency solid error for issue 87,Fixes #87 ,Aylr,928247,closed,False,2018-08-22T13:07:09+00:00,2018-08-22T13:48:26+00:00,2018-08-22T13:48:22+00:00,2018-08-22T13:48:22+00:00,11c19b6397c382bcca8c0eb282d1bade6b2ca87f,unknown,4,1,1,1,0,0,,,
dagster-io/dagster,210604580,93,Changes to support clarify,"1) Make expectations work for cases with named outputs
2) Change output UI to render Output instead of Input
3) Equality semantics for DependencyDefinition (nice for testing)
4) Rename create_pipeline_slice to create_sub_pipeline (marginally
better)
5) Add create_single_solid_pipeline",schrockn,28738937,closed,False,2018-08-23T23:44:19+00:00,2018-08-23T23:45:08+00:00,2018-08-23T23:45:04+00:00,2018-08-23T23:45:04+00:00,3b324e5229a2784a7e8e02c812c6779167de817b,dirty,145,64,14,1,0,0,freiksenet,,
dagster-io/dagster,210608153,94,Catch some common errors with multiple outputs,"1) Catch when someone returns an output that is not specified
2) Disallow returniing multiple outputs of the same name",schrockn,28738937,closed,False,2018-08-24T00:12:21+00:00,2018-08-24T00:12:56+00:00,2018-08-24T00:12:53+00:00,2018-08-24T00:12:53+00:00,3b9eb3ecd625d4cd3d5e10b6196636a64a49aad0,dirty,98,15,3,1,0,0,freiksenet,,
dagster-io/dagster,210681752,103,0.2.0 decorators,,freiksenet,172936,closed,False,2018-08-24T09:07:18+00:00,2018-12-05T12:37:35+00:00,2018-08-24T13:29:12+00:00,2018-08-24T13:29:12+00:00,340fc7a2507954ade2d329073f53c35cfd459113,dirty,205,92,9,2,3,1,,,
dagster-io/dagster,210737336,104,Improve pan and zoom,,freiksenet,172936,closed,False,2018-08-24T13:15:46+00:00,2018-12-05T12:37:36+00:00,2018-08-24T13:17:05+00:00,2018-08-24T13:17:04+00:00,ea225017b21504c9f81c68c31fe448dff12533d0,unknown,77,14,3,1,0,0,,,
dagster-io/dagster,210756386,106,Add MultipleResults.from_dict,"This allows the construction of a MultipleResults object from a
dictionary. I suspect this will actually end up being the most used form
of constructing one of these things.",schrockn,28738937,closed,False,2018-08-24T14:25:44+00:00,2018-08-24T14:27:04+00:00,2018-08-24T14:26:44+00:00,2018-08-24T14:26:44+00:00,ca22d1960e7d5ef9c0e21c240db65572d0e81497,dirty,36,0,3,1,0,0,freiksenet,,
dagster-io/dagster,210796446,107,Do some renames and definition changes,"1) Add ConfigDefinition

This is to future proof this API a bit. Currently it only contains the
argument definition dictionary, but I suspect that will change. This
will make that easier to manage.

2) Add ArgumentDefinitionDictionary class for internal use

3) Consistent naming output_def, input_def in SolidDefinition and handle
classes",schrockn,28738937,closed,False,2018-08-24T17:02:18+00:00,2018-08-24T17:11:54+00:00,2018-08-24T17:11:52+00:00,2018-08-24T17:11:52+00:00,ddf44b185cf0426d18ce5e5de71107a7da7d8f5c,dirty,128,103,21,1,0,0,freiksenet,,
dagster-io/dagster,210917928,108,Improve error messages for transform functions,"If someone returns the wrong thing from a transform function we should
communicate reasonable error messages",schrockn,28738937,closed,False,2018-08-25T19:36:03+00:00,2018-08-25T19:38:21+00:00,2018-08-25T19:38:19+00:00,2018-08-25T19:38:19+00:00,f250de0e4376e7c94d8d70fc0daadc77a8410555,dirty,74,19,2,1,0,0,freiksenet,,
dagster-io/dagster,210926335,109,Use defaultdict in depended_by_of_solid,Let's start using defaultdict whenever we have data structure like this,schrockn,28738937,closed,False,2018-08-25T23:44:09+00:00,2018-08-28T00:41:41+00:00,2018-08-27T14:56:14+00:00,2018-08-27T14:56:14+00:00,d0a3a32d01b3c7fe010574ad1cf89dd6f4eed7b6,dirty,1,3,1,1,0,1,freiksenet,,
dagster-io/dagster,210968591,110,"Various, sundry cleanup in compute nodes","Mainly eliminating SingleSyncOutputComputeNode and then
refactoring the core compute node building path to be
decomposed a bit more",schrockn,28738937,closed,False,2018-08-26T20:11:06+00:00,2018-08-26T20:13:56+00:00,2018-08-26T20:13:53+00:00,2018-08-26T20:13:53+00:00,6f01934db2200c0a9e15a10d2f7f1581bc0d93de,dirty,83,91,1,1,0,0,,,
dagster-io/dagster,210970375,111,Handle optional outputs,"With this you can optionally emit an output. This allows for branching
behavior in dags.",schrockn,28738937,closed,False,2018-08-26T20:53:58+00:00,2018-08-26T20:55:04+00:00,2018-08-26T20:54:57+00:00,2018-08-26T20:54:57+00:00,10d62c5971bcf19223f8154fd23aa09fd8088296,dirty,66,10,2,1,0,0,,,
dagster-io/dagster,211095184,112,Add autoreloading to dagit,"First stage of autoreloading, still need to do browser refresh.",freiksenet,172936,closed,False,2018-08-27T12:31:46+00:00,2018-12-05T12:37:36+00:00,2018-08-27T15:25:00+00:00,2018-08-27T15:25:00+00:00,fcdc0fd744d950056f6c71014855d90ed0334e83,unknown,35,6,3,1,0,0,,,
dagster-io/dagster,211381967,113,Add better pan and zoom,,freiksenet,172936,closed,False,2018-08-28T10:57:49+00:00,2018-08-28T10:58:03+00:00,2018-08-28T10:58:00+00:00,2018-08-28T10:58:00+00:00,006002fd0f3791cc013c99791d59c17a06b07e7f,unknown,65,414,6,1,0,0,,,
dagster-io/dagster,211576870,114,Clean up logging and fix double writing.,"    There are some concepts, some ideas, that are so repugnant, so vile, so debased,
    that the world, by acclamation, shouts with a single voice ""Never Again."" Some things should be 
    tossed into history's unmarked grave of discarded lies. To this list I nominate global, mutable 
    variables.
    
    Against my better judgement I used a global set to deal with python's logging
    global-ness. And naturally it is the source of the first real, honest-to-God
    bug in production.

    Now that I'm more confident about the way the context I am just going to
    totally avoid python's horrific global logger registry and just create
    loggers directly. This ends up being a lot easier to think about,
    manage, and test.",schrockn,28738937,closed,False,2018-08-28T22:27:54+00:00,2018-08-28T23:05:37+00:00,2018-08-28T22:35:45+00:00,2018-08-28T22:35:45+00:00,86f9ab4fca79a15df23afa44d189ffbbd0c01f93,unknown,214,51,6,1,0,0,,,
dagster-io/dagster,211586941,115,Eliminate log level from ExecutionContext,"We had log level as an argument to both the ExecutionContext and the
loggers. This was confusing. Instead, only have the loggers decide the
logging level.",schrockn,28738937,closed,False,2018-08-28T23:26:50+00:00,2018-08-29T14:10:04+00:00,2018-08-28T23:28:12+00:00,2018-08-28T23:28:12+00:00,8785e0a4a5ef01150e3470a8fcd04b25c591e19c,unknown,15,16,4,1,0,0,,,
dagster-io/dagster,211942902,116,Eliminating nearly all lint errors,,schrockn,28738937,closed,False,2018-08-30T03:09:05+00:00,2018-08-30T03:09:16+00:00,2018-08-30T03:09:14+00:00,2018-08-30T03:09:14+00:00,589ff96a7456ebcdb32f33450aafb33f1ca3be15,dirty,35,53,12,1,0,0,,,
dagster-io/dagster,211949372,117,Eliminate input and output callbacks,"Now that we have the type system, we no longer need the output and input
callbacks to do typechecking. Eliminating.",schrockn,28738937,closed,False,2018-08-30T04:03:28+00:00,2018-08-30T04:04:09+00:00,2018-08-30T04:04:03+00:00,2018-08-30T04:04:03+00:00,4efa4dbdf3b00eda5063c711ee5c7e3c06495032,dirty,2,16,1,1,0,0,,,
dagster-io/dagster,211957194,118,Various and sundry cleanup tasks,"Delete unused things. Move some things out of core files and into
modules that indicate that they are test only. Move script_relative_path
to utils rather than test because it useful outside of tests.",schrockn,28738937,closed,False,2018-08-30T05:10:28+00:00,2018-08-30T05:11:35+00:00,2018-08-30T05:11:32+00:00,2018-08-30T05:11:32+00:00,4aff6c793e9816b908c37c506667dd851f89d9f1,dirty,84,140,18,1,0,0,,,
dagster-io/dagster,212046610,119,New execution result model,"* Moved execution results to the following hierarchy PipelineExecutionResult ->
SolidExecutionResult -> ComputeNodeResult
* Adjusted tests and usage for it",freiksenet,172936,closed,False,2018-08-30T11:30:47+00:00,2018-08-30T13:55:45+00:00,2018-08-30T13:52:29+00:00,2018-08-30T13:52:29+00:00,2ea324d61b41fe068317eb2f8ada996cc6103424,dirty,234,193,18,1,3,0,,,
dagster-io/dagster,212047792,120,Python 2.7 tests,,freiksenet,172936,closed,False,2018-08-30T11:35:29+00:00,2018-09-03T13:58:19+00:00,2018-09-03T13:58:15+00:00,2018-09-03T13:58:15+00:00,4b37265f7d3a4c635ebad973b0b96975debca718,dirty,363,180,37,11,0,0,,,
dagster-io/dagster,212088748,121,Minor cleanup post execution result PR,Trivial stuff,schrockn,28738937,closed,False,2018-08-30T13:56:32+00:00,2018-08-30T13:57:57+00:00,2018-08-30T13:57:53+00:00,2018-08-30T13:57:53+00:00,e7c18c4b3da968ab0693440aac7583ebc0f50d74,dirty,12,16,3,1,0,0,,,
dagster-io/dagster,212093919,122,"{pandas, sqlalchemy}_kernel -> {pandas, sqlalchemy}",Renaming these because the kernel nomenclature no longer makes sense,schrockn,28738937,closed,False,2018-08-30T14:11:46+00:00,2018-08-30T14:13:00+00:00,2018-08-30T14:12:49+00:00,2018-08-30T14:12:49+00:00,bb033e48b785664c36705ed0097e5974c6ece89b,dirty,23,24,31,1,0,0,,,
dagster-io/dagster,212156392,123,Add docstrings for public classes in definitions.py,,schrockn,28738937,closed,False,2018-08-30T17:35:24+00:00,2018-08-30T17:35:52+00:00,2018-08-30T17:35:49+00:00,2018-08-30T17:35:49+00:00,ac798ce6c98e089b3f63d30cfbf5ad1ae2e8e67b,dirty,227,17,2,1,0,0,,,
dagster-io/dagster,212168921,124,Eliminate circular deps,"Eliminatin circular deps almost always yields some nice architectural
wins and this is no exception. DagsterEnv (which began as InputManager)
is gone! All rejoice. Things are much cleaner now.

@freiksenet this should relevant to your interests and it change execution pipeline",schrockn,28738937,closed,False,2018-08-30T18:23:09+00:00,2018-08-30T18:29:36+00:00,2018-08-30T18:29:32+00:00,2018-08-30T18:29:32+00:00,f9df71a133d47482f9914fabe7df7f7218551776,dirty,348,340,8,1,0,0,freiksenet,,
dagster-io/dagster,212175893,125,Disallow returning Result from single_output_transform,This almost certainly represents programmer error so disallow.,schrockn,28738937,closed,False,2018-08-30T18:48:48+00:00,2018-08-30T18:50:08+00:00,2018-08-30T18:50:03+00:00,2018-08-30T18:50:03+00:00,b1550931eeba7c05437852a1eb081cf52ff055e1,dirty,20,1,2,1,0,0,,,
dagster-io/dagster,212364417,129,cp,"tests

tests

add some error checking (still need to test)

library solid test passes

add library concept

begin to move cli to new api

dagit works

undo magic context",schrockn,28738937,closed,False,2018-08-31T12:13:45+00:00,2018-08-31T12:48:44+00:00,2018-08-31T12:48:44+00:00,,162ab80e08d3d7aab1dd147d3b3c1f06e50b79ab,dirty,517,245,17,1,0,0,,,
dagster-io/dagster,212372867,130,Add RepositoryDefinition,"Before we had no way of grouping pipelines together aside from the
pipelines.yml file. Instead, this moves that concept to a Python API
called the repository. A repository is a collection of pipelines.

Instead of specifying every pipeline in a project individually in a yaml
file, we now just have a single repository.

The repository object creates pipelines on demand (so that they can be
loaded by name without loading all the pipelines).

Repositories *also* have the concept of library solids (which can be
thought of higher order solids) which are ways to create solids in a
config-driven way. Authors will be able to design library solids that
are resuable. This will enable a layer of solid creation via config, and
much easier testing because authors will be able to inject pre-made
solids into existing pipelines to stub out values.",schrockn,28738937,closed,False,2018-08-31T12:49:17+00:00,2018-08-31T16:18:49+00:00,2018-08-31T16:17:23+00:00,2018-08-31T16:17:23+00:00,a4ebd17fc9e0d6fbaf80bda4b5cb6dd3f98ddc59,dirty,523,251,19,1,0,0,freiksenet,,
dagster-io/dagster,212620553,136,"Move from ""Argument Dictionary"" to proper composited type system","I decided that this move should be made before 0.2.0. This is, IMO, a
much more sound system of managing config.

Instead of having ""argument dictionaries"" everywhere, configs take a top
level type to describe themselves. I've implemented one composite type,
the accepts a set of Fields and then produced a python dict for
implementors to process at runtime.

This system has a number of advantages:

1) Configs can be arbitrarily nested and grouped together. This already
would have been immediately useful.

2) We can move to strongly-typed APIs for configs. Instead of vending a
dict, vend a namedtuple, for example.

3) Even further that 2) this is a step towards a formalized ""resource""
pattern for configs.  Instead of the type producing a dumb struct, you
could imagine the config producing a richer ""resource"" object that
manages connections or so forth. Or alternatively a system stacked on
top of this one that does that (and requires configs of a certain type).

4) This sets up the ability to support single value config quite easily.
I'm not sure if this is a good idea, but it is possible now if we allow
it.

One clear deficiency is a regression of error messaging. However, we
weren't testing error messages properly the entire time!
(see https://github.com/dagster-io/dagster/issues/135) So we need to
go through and audit type-system-related errors and figure out a way
to construct them in this new structure.",schrockn,28738937,closed,False,2018-09-03T00:51:12+00:00,2018-09-03T22:35:23+00:00,2018-09-03T22:35:18+00:00,2018-09-03T22:35:18+00:00,771edab5a0b8658ecfd87f721776de298cf6af19,dirty,722,607,28,1,0,0,,,
dagster-io/dagster,212831522,142,move readme,"This is a starting point for documentation. Two major outputs here.

1) A new intro laying out core dagster ideology.
2) Docstrings for major definition classes.

For docstrings I settled on the google style docstrings.

See section 3.8 of https://github.com/google/styleguide/blob/gh-pages/pyguide.md",schrockn,28738937,closed,False,2018-09-04T00:35:07+00:00,2018-09-04T01:12:51+00:00,2018-09-04T01:12:48+00:00,2018-09-04T01:12:48+00:00,46185b57768f53a3d68914cb2da51948494329df,dirty,396,617,5,1,0,0,,,
dagster-io/dagster,213257609,143,Info object,,freiksenet,172936,closed,False,2018-09-05T11:20:33+00:00,2018-12-05T12:37:37+00:00,2018-09-07T16:55:58+00:00,,e7351db2629e25a7449105a554995719ba77d254,dirty,82,103,11,1,0,1,schrockn,,
dagster-io/dagster,213341924,144,Documentation push,,schrockn,28738937,closed,False,2018-09-05T15:44:31+00:00,2018-09-07T00:04:59+00:00,2018-09-05T15:47:47+00:00,2018-09-05T15:47:47+00:00,2f555a74e2725339f943f73c8db537a614e3e1fe,dirty,334,166,9,1,0,0,,,
dagster-io/dagster,213738103,149,* some minor typos in docs,,Aylr,928247,closed,False,2018-09-06T20:19:36+00:00,2018-09-06T22:41:41+00:00,2018-09-06T22:41:33+00:00,2018-09-06T22:41:33+00:00,e3e0bf0cb2f7c7071084baea4bd379bd1a43b872,dirty,4,4,1,1,0,0,,,
dagster-io/dagster,213780115,150,"Various, sundry fixes while debugging",Added some logging and did some refactoring,schrockn,28738937,closed,False,2018-09-06T23:45:07+00:00,2018-09-06T23:45:33+00:00,2018-09-06T23:45:30+00:00,2018-09-06T23:45:29+00:00,5e9a9986c699343214c894f6b9a617fac67457b0,dirty,70,28,4,1,0,0,,,
dagster-io/dagster,213945125,151,Rename @solid to @transform,"- Rename @solid to @Transform
- Add new @solid transform which lightly wraps SolidDefinition.
Transform_fn does not change function signature
- Both @solid and @Transform now work with a decorator with no parens",schrockn,28738937,closed,False,2018-09-07T14:26:27+00:00,2018-09-08T02:28:41+00:00,2018-09-07T16:50:31+00:00,,f2fb1b28cd5df5ad49be06f0a196d17f80127d18,dirty,431,123,14,1,0,1,freiksenet,,
dagster-io/dagster,213990585,153,Change @solid to unconditionally accept context and conf,"Eliminate with_context. Enforce that @solid accepts both a context
and a conf. If we need to reintroduce information hiding we will.",schrockn,28738937,closed,False,2018-09-07T17:18:33+00:00,2018-09-07T19:17:29+00:00,2018-09-07T19:17:26+00:00,2018-09-07T19:17:26+00:00,81ebef5101aecd96dbaada3335c7b0c179b3faa6,dirty,181,175,22,1,0,0,freiksenet,,
dagster-io/dagster,214072902,157,"Default to no context, conf. Add flags","I think it's pretty critical to make these opt-in. I'm not sure I like
this but I think it might be the best thing all things considered.",schrockn,28738937,closed,False,2018-09-08T02:32:49+00:00,2018-09-08T11:57:06+00:00,2018-09-08T11:35:18+00:00,,321538a4627a3943c84d663f0d79ee0aa22c3e44,dirty,220,65,10,4,0,1,freiksenet,,
dagster-io/dagster,214091179,158,lambda_solid and solid,"There are now two flavors of decorator.

1) `lambda_solid`. Takes inputs. No config or context. Produces a single output. Only
return naked value out of the transform.

2) `solid`. Takes inputs, produces outputs. Accepts context and config.
The transform can return a naked value, a Result, or a generator that
yields a sequence of Results.

This satisfies the need/desire for ""simple"" and introductory use cases
for solids (in the form of a lambda_solid) relatively elegantly but then
has a decorator-style solid that can cover nearly all use cases.",schrockn,28738937,closed,False,2018-09-08T11:34:53+00:00,2018-09-08T11:50:58+00:00,2018-09-08T11:50:53+00:00,2018-09-08T11:50:53+00:00,1c802076247ab65023862ba4328d348390141bd4,dirty,295,147,13,1,0,1,freiksenet,,
dagster-io/dagster,214092888,159,Change order of arguments to transform function in SolidDefintion,"To be consistent with decorators (and logic generally), now:

context, conf, inputs",schrockn,28738937,closed,False,2018-09-08T12:23:11+00:00,2018-09-08T12:23:28+00:00,2018-09-08T12:23:23+00:00,2018-09-08T12:23:23+00:00,df972f425a3e481b37183830d0d52419efd91f9c,dirty,85,89,17,1,0,0,,,
dagster-io/dagster,214099449,160,Intro Tutorial parts 1-4,It begins,schrockn,28738937,closed,False,2018-09-08T15:05:26+00:00,2018-09-08T15:27:46+00:00,2018-09-08T15:27:43+00:00,2018-09-08T15:27:42+00:00,3f0b7b0000fd4fb988238cc1be39c1bde808b729,dirty,407,14,16,1,0,0,,,
dagster-io/dagster,214149049,163,Context Tutorial + API improvements,Add context tutorial section. Clean up up default context handling.,schrockn,28738937,closed,False,2018-09-09T14:56:49+00:00,2018-09-09T15:02:26+00:00,2018-09-09T15:02:22+00:00,2018-09-09T15:02:22+00:00,b57347bd9a7336e4c4ddadf00a2a7e9fec482f0b,dirty,231,80,22,1,0,0,,,
dagster-io/dagster,214155733,164,Repositories and Tools Tutorial,"Also be able to load repositories from files, not just modules.",schrockn,28738937,closed,False,2018-09-09T17:35:51+00:00,2018-09-09T17:37:37+00:00,2018-09-09T17:37:34+00:00,2018-09-09T17:37:34+00:00,050f76cd0ea2ca96f568af60cf3e2c78b8326b9d,dirty,146,7,6,1,0,0,,,
dagster-io/dagster,214158570,165,Add CLI-driven execution tutorial part,,schrockn,28738937,closed,False,2018-09-09T18:40:27+00:00,2018-09-09T19:13:51+00:00,2018-09-09T19:13:47+00:00,2018-09-09T19:13:47+00:00,4d662b8d737450d788c34466e446c251b3b6b079,dirty,164,5,7,1,0,0,,,
dagster-io/dagster,214166668,166,Logging improvements,,schrockn,28738937,closed,False,2018-09-09T21:46:19+00:00,2018-09-09T22:26:12+00:00,2018-09-09T22:26:08+00:00,2018-09-09T22:26:08+00:00,b70e235b4275749142d3fc90f08d2c5c1c38e616,dirty,132,57,5,1,0,0,,,
dagster-io/dagster,214284499,167,Remove incoming value,,freiksenet,172936,closed,False,2018-09-10T11:39:21+00:00,2018-09-10T15:07:15+00:00,2018-09-10T15:07:13+00:00,2018-09-10T15:07:13+00:00,3546178e3fa6afc06e678cc8c8532aa729afa044,dirty,138,159,7,2,0,0,,,
dagster-io/dagster,214313296,168,Remove metric infrastructure,"This was essentially unused and overcomplicated. We can readd something
like this later.",schrockn,28738937,closed,False,2018-09-10T13:25:48+00:00,2018-09-10T13:35:44+00:00,2018-09-10T13:35:41+00:00,2018-09-10T13:35:41+00:00,42e352b0e57fa4c3c90766e0f10be97cf2c420f1,dirty,16,89,6,1,0,0,freiksenet,,
dagster-io/dagster,214338464,169,Add graphviz flags,"Implements a flag to suppress box nodes for solid dependencies. This is nice for decluttering cluttered graphs.

Untested.",abegong,1239085,closed,False,2018-09-10T14:41:39+00:00,2018-12-11T21:39:23+00:00,2018-09-11T11:35:04+00:00,2018-09-11T11:35:04+00:00,6abe7a989d5758842f45ab771bb57d1c477e219f,dirty,26,16,2,2,0,0,,,
dagster-io/dagster,214543454,170,Initial styling pass,"Hey folks! This PR styles the dagit interface a bit. I broke things out into small commits so you can read through the changes individually. Hopefully this is a good start and we can talk through more changes from hereâ€”we discussed a couple of these earlier (adding the Dagster logo, etc.), but I had a couple other goals in mind as well:

- Clean up the header sizes so they roughly follow information hierarchy.  (Solid name is too small?)
- Prevent long / autogenerated descriptions from blowing things up and making it difficult to see the forest through the trees. (Made them collapsible)
- Reduce the number of things that have borders and add more emphasis to types (because they're a big part of why this is so cool.)
- Replace nested section cards + solid cards with section headings + solid cards

Future:
- I think the ""inputs"", ""outputs"" and ""config"" blocks should share a visual language of some sort between the HTML and DAG. (For example we could use a green stripe to mark inputs in the DAG, and also in the solids ""reference"" section.)
- I'm a big fan of reflowing the DAG vertically and laying out the solid ""cards"" to the right hand side ala Python Notebooks, essentially combining the pipeline flow information with the solid information rather than having a bit of solid info in graph form and a bit in ""reference"" from. It's unclear what we'd do with pipelines that have ""wide"" / highly concurrent DAGs, though. We'll need a solution that allows the DAG to ""wrap"" or ""stack"" items a bit (maybe like spring-loaded items in the macOS dock.)

<img width=""1381"" alt=""image"" src=""https://user-images.githubusercontent.com/1037212/45345915-8f43bd00-b55c-11e8-925e-9bbe037b36be.png"">

<img width=""1004"" alt=""image"" src=""https://user-images.githubusercontent.com/1037212/45345946-ab475e80-b55c-11e8-8002-526ecc631528.png"">

<img width=""1381"" alt=""image"" src=""https://user-images.githubusercontent.com/1037212/45345942-a4b8e700-b55c-11e8-82c2-6cb1d2ee6d4c.png"">

Sidenote:
- I'm not sure what to do about Solids that have very complex input / output types. It was a mess, and right justifying made it a worse mess. Maybe many of these are just easy to read because the types have been left as `any`... If the average case is more like this (screenshot), it might make sense to represent the inputs / outputs in table form:

<img width=""1002"" alt=""image"" src=""https://user-images.githubusercontent.com/1037212/45346197-6243da00-b55d-11e8-9912-b337a30a60ba.png"">
",bengotow,1037212,closed,False,2018-09-11T07:55:34+00:00,2018-12-11T21:39:25+00:00,2018-09-11T08:35:37+00:00,2018-09-11T08:35:37+00:00,06b82a56762ead10caf3cf3db87bb62876cd756f,dirty,279,61,16,9,2,0,,,
