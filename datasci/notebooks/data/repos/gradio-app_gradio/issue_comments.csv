repo_full_name,issue_id,comment_id,user_login,user_id,created_at,updated_at,body,reactions_total,reactions_plus1,reactions_minus1,reactions_laugh,reactions_hooray,reactions_confused,reactions_heart
gradio-app/gradio,3049796526,2867604225,abidlabs,1778297,2025-05-09T18:47:29+00:00,2025-05-09T18:47:29+00:00,"Hi @qqandy0120 you cannot access component attributes directly like `output_box.value`. You need to pass them in as an input to your function, like this:

```py
    @timer.tick(inputs=[output_box])
    def time_debug(val):
            print(val)
```",0,0,0,0,0,0,0
gradio-app/gradio,3049796526,2868333913,qqandy0120,63918752,2025-05-10T04:18:15+00:00,2025-05-10T04:30:56+00:00,"Hi @abidlabs,

Thanks for the help earlier. I’m working on a slightly more complex use case where I want to manage a Gradio button’s state using a decorator. The idea is to:
- Change the button label to ""Processing..."" and disable it while a function is running.
- Restore the original button label and re-enable it afterward.

Here’s the core of what I’ve implemented:
```python
def activate_button(text):
    '''
    input text is a must to should the function of the button
    '''
    return gr.Button(value=text, interactive=True, variant=""primary"")


def deactivate_button(text=""Processing...""):
    return gr.Button(value=text, interactive=False, variant=""secondary"")


def button_processing_handler(button:gr.Button, num_outputs:int, button_index:int, loading_text=""Processing...""):
    """"""
        Decorator: Automatically manage button state transitions during processing.

        Parameters:
            button_descr (str): The original label of the button.
            num_outputs (int): Total number of outputs that `inner` function returns.
            button_index (int): The index position of the button in the outputs list.
            loading_text (str): Text to display on the button while processing.

        Usage example:
        @button_processing_handler(button_descr=""Submit"", num_outputs=2, button_index=0, loading_text=""Processing..."")
        def process_function(file, param1, param2):
            # Processing logic...
            return result1, result2  <- so num_outputs is 2
        
        button_A.click(
            fn=process_function,
            inputs=[file, param1, param2],
            outputs=[button_A, result1, result2] <- remember to put button as output here and declare button index in wrapper, here, button_index is 0
        )
    """"""
    def decorator(func: Callable):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            btn_org_msg = button.value
            num_outputs_with_wrapper = num_outputs + 1
            outputs = list(itertools.repeat(gr.update(), num_outputs_with_wrapper))
            # deactivate button before running the main function
            outputs[button_index] = deactivate_button(loading_text)
            yield outputs

            results = func(*args, **kwargs)

            if not isinstance(results, list):
                results = list(results)
            
            # update outputs after the main function
            outputs[button_index] = activate_button(btn_org_msg)
            is_arg_after_btn = False
            for i, result in enumerate(results):
                if i == button_index:
                    is_arg_after_btn = True
                outputs[i+is_arg_after_btn] = result

            yield outputs
        return wrapper
    return decorator
```
The issue I’m running into is not knowing how to capture the button value. The original way I've tried is using`btn_org_msg = button.value`, which doesn’t capture the current label of the button at runtime(when the label was updated by other event listeners like `button.change()`.) and so does using `btn_org_msg=button` and return `btn_org_msg` as output.

idea:

`
init_button_value aaa --> button.update(value=abc) by an event, -> button.update(value=cde) by another event -> button.click with my decorator
`

here the value I receive is aaa, but I want to get cde

Is there any recommended way to get the current displayed value of a component like a button when the function is triggered?

Thanks so much in advance!",0,0,0,0,0,0,0
